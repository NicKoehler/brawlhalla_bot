# THIS CODE IS AUTOGENERATED BY src/generate_locales.py
# DO NOT EDIT THIS FILE DIRECTLY.

from locales import it, en


SUPPORTED_LANGUAGES = {'it': 'it_IT', 'en': 'en_US'}


class Translator:
    def __init__(self, locale, locale_str) -> None:
        self.locale = locale
        self.locale_str = locale_str

    def button_clan(self):
        return self.locale.BUTTON_CLAN

    def button_close(self):
        return self.locale.BUTTON_CLOSE

    def button_default_player(self):
        return self.locale.BUTTON_DEFAULT_PLAYER

    def button_general(self):
        return self.locale.BUTTON_GENERAL

    def button_issue(self):
        return self.locale.BUTTON_ISSUE

    def button_legend(self):
        return self.locale.BUTTON_LEGEND

    def button_ranked_solo(self):
        return self.locale.BUTTON_RANKED_SOLO

    def button_ranked_team(self):
        return self.locale.BUTTON_RANKED_TEAM

    def button_teammate(self):
        return self.locale.BUTTON_TEAMMATE

    def description_id(self):
        return self.locale.DESCRIPTION_ID

    def description_language(self):
        return self.locale.DESCRIPTION_LANGUAGE

    def description_legend(self):
        return self.locale.DESCRIPTION_LEGEND

    def description_me(self):
        return self.locale.DESCRIPTION_ME

    def description_search(self):
        return self.locale.DESCRIPTION_SEARCH

    def description_start(self):
        return self.locale.DESCRIPTION_START

    def eerror_length(self):
        return self.locale.EERROR_LENGTH

    def error_generic(
        self,
        error
    ):
        return self.locale.ERROR_GENERIC.format(
            error=error
        )

    def error_legend_result(self):
        return self.locale.ERROR_LEGEND_RESULT

    def error_missing_default_player(self):
        return self.locale.ERROR_MISSING_DEFAULT_PLAYER

    def error_no_clan_data(self):
        return self.locale.ERROR_NO_CLAN_DATA

    def error_no_ranked_data(self):
        return self.locale.ERROR_NO_RANKED_DATA

    def error_no_team_data(self):
        return self.locale.ERROR_NO_TEAM_DATA

    def error_player_not_found(
        self,
        id
    ):
        return self.locale.ERROR_PLAYER_NOT_FOUND.format(
            id=id
        )

    def error_search_result(
        self,
        query
    ):
        return self.locale.ERROR_SEARCH_RESULT.format(
            query=query
        )

    def error_team_result(self):
        return self.locale.ERROR_TEAM_RESULT

    def language(self):
        return self.locale.LANGUAGE

    def results_legends(
        self,
        total,
        current
    ):
        return self.locale.RESULTS_LEGENDS.format(
            total=total,
            current=current
        )

    def results_search(
        self,
        total,
        current,
        query
    ):
        return self.locale.RESULTS_SEARCH.format(
            total=total,
            current=current,
            query=query
        )

    def results_teams(
        self,
        total,
        current
    ):
        return self.locale.RESULTS_TEAMS.format(
            total=total,
            current=current
        )

    def search(self):
        return self.locale.SEARCH

    def stats_base(
        self,
        name,
        id
    ):
        return self.locale.STATS_BASE.format(
            name=name,
            id=id
        )

    def stats_clan(
        self,
        name,
        current,
        id,
        num,
        total,
        date,
        xp
    ):
        return self.locale.STATS_CLAN.format(
            name=name,
            current=current,
            id=id,
            num=num,
            total=total,
            date=date,
            xp=xp
        )

    def stats_general(
        self,
        komine,
        kobomb,
        loses,
        kospikeball,
        damagespikeball,
        games,
        damagebomb,
        totalsuicide,
        totalko,
        xp,
        hitsnowball,
        winperc,
        most_used_legend,
        kosidekick,
        total_game_time,
        clan,
        damagesidekick,
        totalteamko,
        damagemine,
        totaldeath,
        level,
        wins,
        kosnowball
    ):
        return self.locale.STATS_GENERAL.format(
            komine=komine,
            kobomb=kobomb,
            loses=loses,
            kospikeball=kospikeball,
            damagespikeball=damagespikeball,
            games=games,
            damagebomb=damagebomb,
            totalsuicide=totalsuicide,
            totalko=totalko,
            xp=xp,
            hitsnowball=hitsnowball,
            winperc=winperc,
            most_used_legend=most_used_legend,
            kosidekick=kosidekick,
            total_game_time=total_game_time,
            clan=clan,
            damagesidekick=damagesidekick,
            totalteamko=totalteamko,
            damagemine=damagemine,
            totaldeath=totaldeath,
            level=level,
            wins=wins,
            kosnowball=kosnowball
        )

    def stats_legend(
        self,
        suicide,
        loses,
        koweaponone,
        damageweaponone,
        teamko,
        name,
        ko,
        kothrownitem,
        damagethrownitem,
        timeheldweapontwo,
        kounarmed,
        games,
        weapontwo,
        xp,
        winperc,
        id,
        damageunarmed,
        damagedealt,
        matchtime,
        weaponone,
        koweapontwo,
        damageweapontwo,
        kogadgets,
        level,
        wins,
        timeheldweaponone,
        death,
        damagetaken,
        damagegadgets
    ):
        return self.locale.STATS_LEGEND.format(
            suicide=suicide,
            loses=loses,
            koweaponone=koweaponone,
            damageweaponone=damageweaponone,
            teamko=teamko,
            name=name,
            ko=ko,
            kothrownitem=kothrownitem,
            damagethrownitem=damagethrownitem,
            timeheldweapontwo=timeheldweapontwo,
            kounarmed=kounarmed,
            games=games,
            weapontwo=weapontwo,
            xp=xp,
            winperc=winperc,
            id=id,
            damageunarmed=damageunarmed,
            damagedealt=damagedealt,
            matchtime=matchtime,
            weaponone=weaponone,
            koweapontwo=koweapontwo,
            damageweapontwo=damageweapontwo,
            kogadgets=kogadgets,
            level=level,
            wins=wins,
            timeheldweaponone=timeheldweaponone,
            death=death,
            damagetaken=damagetaken,
            damagegadgets=damagegadgets
        )

    def stats_ranked(
        self,
        region,
        rating,
        glory,
        loses,
        elo_reset,
        games,
        peak,
        wins,
        tier
    ):
        return self.locale.STATS_RANKED.format(
            region=region,
            rating=rating,
            glory=glory,
            loses=loses,
            elo_reset=elo_reset,
            games=games,
            peak=peak,
            wins=wins,
            tier=tier
        )

    def stats_ranked_team(
        self,
        region,
        rating,
        loses,
        games,
        peak,
        wins,
        teamname,
        tier
    ):
        return self.locale.STATS_RANKED_TEAM.format(
            region=region,
            rating=rating,
            loses=loses,
            games=games,
            peak=peak,
            wins=wins,
            teamname=teamname,
            tier=tier
        )

    def status_default_player_set(self):
        return self.locale.STATUS_DEFAULT_PLAYER_SET

    def status_language_changed(self):
        return self.locale.STATUS_LANGUAGE_CHANGED

    def status_language_unchanged(self):
        return self.locale.STATUS_LANGUAGE_UNCHANGED

    def time_days(
        self,
        t
    ):
        return self.locale.TIME_DAYS.format(
            t=t
        )

    def time_hours(
        self,
        t
    ):
        return self.locale.TIME_HOURS.format(
            t=t
        )

    def time_minutes(
        self,
        t
    ):
        return self.locale.TIME_MINUTES.format(
            t=t
        )

    def time_seconds(
        self,
        t
    ):
        return self.locale.TIME_SECONDS.format(
            t=t
        )

    def usage_id(self):
        return self.locale.USAGE_ID

    def usage_search(self):
        return self.locale.USAGE_SEARCH

    def welcome(
        self,
        name
    ):
        return self.locale.WELCOME.format(
            name=name
        )


class Localization:
    def __init__(self) -> None:
        self._strings = {
            "it": Translator(it, "it_IT"),
            "en": Translator(en, "en_US"),
        }

    def get_translator(self, lang: str) -> Translator:
        if lang not in self._strings:
            raise ValueError(f"Unsupported language: {lang}")
        return self._strings[lang]
