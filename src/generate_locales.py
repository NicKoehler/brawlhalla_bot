from locales import en
from re import compile

SUPPORTED_LANGUAGES = {"it": "it_IT", "en": "en_US"}

REGEX = compile(r"\{([\S]+?)\}")

print(
    """# THIS CODE IS AUTOGENERATED BY src/generate_locales.py
# DO NOT EDIT THIS FILE DIRECTLY.
"""
)


print(f"from locales import {', '.join(SUPPORTED_LANGUAGES)}\n\n")

print(f"SUPPORTED_LANGUAGES = {SUPPORTED_LANGUAGES}\n\n")

print(
    """class Translator:
    def __init__(self, locale, locale_str) -> None:
        self.locale = locale
        self.locale_str = locale_str
"""
)

strings = [item for item in dir(en) if not item.startswith("__")]
for string in strings:
    args = set(REGEX.findall(en.__dict__[string]))
    if not args:
        print(f"    def {string.lower()}(self):")
        print(f"        return self.locale.{string}\n")
    else:
        args_str = ",\n".join(f"        {arg}" for arg in args)
        args_kwargs = ",\n".join(f"            {arg}={arg}" for arg in args)
        print(f"    def {string.lower()}(")
        print("        self,")
        print(f"{args_str}")
        print("    ):")
        print(
            f"        return self.locale.{string}.format(\n{args_kwargs}\n        )\n"
        )

print(
    "\nclass Localization:\n"
    "    def __init__(self) -> None:\n"
    "        self._strings = {\n"
    + "\n".join(
        f'            "{k}": Translator({k}, "{v}"),'
        for k, v in SUPPORTED_LANGUAGES.items()
    )
    + "\n        }\n"
)
print(
    "    def get_translator(self, lang: str) -> Translator:\n"
    "        if lang not in self._strings:\n"
    '            raise ValueError(f"Unsupported language: {lang}")\n'
    "        return self._strings[lang]"
)
